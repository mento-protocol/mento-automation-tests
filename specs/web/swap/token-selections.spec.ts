import { expect } from "@fixtures/common/common.fixture";
import { defaultSwapAmount, Token } from "@constants/token.constants";
import { suite } from "@helpers/suite/suite.helper";
import { IExecution } from "@helpers/suite/suite.types";
import { TestTag } from "@constants/test.constants";

const testCases = [
  {
    token: Token.CELO,
    expectedValidTokens: [
      Token.cUSD,
      Token.cEUR,
      Token.cREAL,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.axlEUROC,
      Token.eXOF,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    expectedInvalidTokens: [],
    id: "T61ff6eca",
  },
  {
    token: Token.cUSD,
    expectedValidTokens: [
      Token.CELO,
      Token.cEUR,
      Token.cREAL,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.eXOF,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    expectedInvalidTokens: [Token.axlEUROC],
    id: "T4cf1f159",
  },
  {
    token: Token.cEUR,
    expectedValidTokens: [
      Token.CELO,
      Token.cUSD,
      Token.cREAL,
      Token.USDC,
      Token.axlUSDC,
      Token.axlEUROC,
      Token.eXOF,
    ],
    expectedInvalidTokens: [
      Token.USDT,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    id: "T55e5689d",
  },
  {
    token: Token.cREAL,
    expectedValidTokens: [
      Token.CELO,
      Token.cUSD,
      Token.cEUR,
      Token.USDC,
      Token.axlUSDC,
      Token.eXOF,
    ],
    expectedInvalidTokens: [
      Token.USDT,
      Token.axlEUROC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    id: "T1cdcec6e",
  },
  {
    token: Token.USDC,
    expectedValidTokens: [
      Token.CELO,
      Token.cUSD,
      Token.cEUR,
      Token.cREAL,
      Token.USDT,
      Token.axlUSDC,
      Token.axlEUROC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    expectedInvalidTokens: [Token.eXOF],
    id: "T65b923f0",
  },
  {
    token: Token.USDT,
    expectedValidTokens: [
      Token.CELO,
      Token.cUSD,
      Token.USDC,
      Token.axlUSDC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    expectedInvalidTokens: [
      Token.cEUR,
      Token.cREAL,
      Token.axlEUROC,
      Token.eXOF,
    ],
    id: "T1728aaf3",
  },
  {
    token: Token.axlUSDC,
    expectedValidTokens: [
      Token.CELO,
      Token.cUSD,
      Token.cEUR,
      Token.cREAL,
      Token.USDC,
      Token.USDT,
      Token.axlEUROC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    expectedInvalidTokens: [Token.eXOF],
    id: "T3842f1e6",
  },
  {
    token: Token.axlEUROC,
    expectedValidTokens: [
      Token.CELO,
      Token.cEUR,
      Token.USDC,
      Token.axlUSDC,
      Token.eXOF,
    ],
    expectedInvalidTokens: [
      Token.cUSD,
      Token.cREAL,
      Token.USDT,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    id: "T1b2d5431",
  },
  {
    token: Token.eXOF,
    expectedValidTokens: [
      Token.CELO,
      Token.cUSD,
      Token.cEUR,
      Token.cREAL,
      Token.axlEUROC,
    ],
    expectedInvalidTokens: [
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    id: "T8b44f3ea",
  },
  {
    token: Token.cKES,
    expectedValidTokens: [
      Token.CELO,
      Token.cUSD,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    expectedInvalidTokens: [
      Token.cEUR,
      Token.cREAL,
      Token.axlEUROC,
      Token.eXOF,
    ],
    id: "Tdf1f8d60",
  },
  {
    token: Token.PUSO,
    expectedValidTokens: [
      Token.CELO,
      Token.cUSD,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.cKES,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    expectedInvalidTokens: [
      Token.cEUR,
      Token.cREAL,
      Token.axlEUROC,
      Token.eXOF,
    ],
    id: "Td740bfbf",
  },
  {
    token: Token.cCOP,
    expectedValidTokens: [
      Token.CELO,
      Token.cUSD,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.cKES,
      Token.PUSO,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    expectedInvalidTokens: [
      Token.cEUR,
      Token.cREAL,
      Token.axlEUROC,
      Token.eXOF,
    ],
    id: "T7a80e866",
  },
  {
    token: Token.cGHS,
    expectedValidTokens: [
      Token.CELO,
      Token.cUSD,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    expectedInvalidTokens: [
      Token.cEUR,
      Token.cREAL,
      Token.axlEUROC,
      Token.eXOF,
    ],
    id: "T052ce765",
  },
  {
    token: Token.cGBP,
    expectedValidTokens: [
      Token.CELO,
      Token.cUSD,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    expectedInvalidTokens: [
      Token.cEUR,
      Token.cREAL,
      Token.axlEUROC,
      Token.eXOF,
    ],
    id: "Tb6f16c86",
  },
  {
    token: Token.cZAR,
    expectedValidTokens: [
      Token.CELO,
      Token.cUSD,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    expectedInvalidTokens: [
      Token.cEUR,
      Token.cREAL,
      Token.axlEUROC,
      Token.eXOF,
    ],
    id: "T9787390d",
  },
  {
    token: Token.cCAD,
    expectedValidTokens: [
      Token.CELO,
      Token.cUSD,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    expectedInvalidTokens: [
      Token.cEUR,
      Token.cREAL,
      Token.axlEUROC,
      Token.eXOF,
    ],
    id: "T14202806",
  },
  {
    token: Token.cAUD,
    expectedValidTokens: [
      Token.CELO,
      Token.cUSD,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    expectedInvalidTokens: [
      Token.cEUR,
      Token.cREAL,
      Token.axlEUROC,
      Token.eXOF,
    ],
    id: "Tee27957f",
  },
  {
    token: Token.cCHF,
    expectedValidTokens: [
      Token.CELO,
      Token.cUSD,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cJPY,
      Token.cNGN,
    ],
    expectedInvalidTokens: [
      Token.cEUR,
      Token.cREAL,
      Token.axlEUROC,
      Token.eXOF,
    ],
    id: "Tf78b7915",
  },
  {
    token: Token.cJPY,
    expectedValidTokens: [
      Token.CELO,
      Token.cUSD,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cNGN,
    ],
    expectedInvalidTokens: [
      Token.cEUR,
      Token.cREAL,
      Token.axlEUROC,
      Token.eXOF,
    ],
    id: "Td80ddce2",
  },
  {
    token: Token.cNGN,
    expectedValidTokens: [
      Token.CELO,
      Token.cUSD,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
    ],
    expectedInvalidTokens: [
      Token.cEUR,
      Token.cREAL,
      Token.axlEUROC,
      Token.eXOF,
    ],
    id: "T7084e96f",
  },
];

suite({
  name: "Swap - Token selections",
  tags: [TestTag.Regression, TestTag.Parallel],
  tests: [
    {
      name: "Swap token inputs",
      testCaseId: "Td88a4d31",
      test: async ({ web }) => {
        await web.swap.fillForm({
          sellAmount: defaultSwapAmount,
          tokens: {
            sell: Token.cREAL,
            buy: Token.CELO,
            clicksOnSellTokenButton: 1,
          },
        });
        await web.swap.swapInputs();
        expect(await web.swap.getCurrentSellTokenName()).toEqual(Token.CELO);
        expect(await web.swap.getCurrentBuyTokenName()).toEqual(Token.cREAL);
      },
    },
    // TODO:
    // {
    //   name: "Select an invalid pair from Buy to Sell dropdowns",
    //   testCaseId: "Td88a4d31",
    //   test: async ({ web }) => {
    //     // await web.swap.fillForm({
    //     //   sellAmount: defaultSwapAmount,
    //     //   tokens: {
    //     //     sell: Token.cREAL,
    //     //     buy: Token.axlEUROC,
    //     //     clicksOnSellTokenButton: 1,
    //     //   },
    //     // });
    //     await web.swap.openSelectTokenModal("sell");
    //     await web.swap.selectSellToken(Token.cREAL);
    //     await web.swap.openSelectTokenModal("buy");
    //     await web.swap.selectTokenModalPage.tokens[Token.axlEUROC].click();
    //     expect(await web.swap.getCurrentSellTokenName()).toEqual(Token.CELO);
    //     expect(await web.swap.getCurrentBuyTokenName()).toEqual(Token.cREAL);
    //   },
    // },
    // TODO:
    // {
    //   name: "Select an invalid pair from Buy to Sell dropdowns",
    //   testCaseId: "Td88a4d31",
    //   test: async ({ web }) => {
    //     await web.main.connectWalletByName(WalletName.Metamask);
    //     await web.swap.fillForm({
    //       sellAmount: defaultSwapAmount,
    //       tokens: {
    //         sell: Token.cREAL,
    //         buy: Token.CELO,
    //         clicksOnSellTokenButton: 1,
    //       },
    //     });
    //     await web.swap.swapInputs();
    //     expect(await web.swap.getCurrentSellTokenName()).toEqual(Token.CELO);
    //     expect(await web.swap.getCurrentBuyTokenName()).toEqual(Token.cREAL);
    //   },
    // },
    ...testCases.map(testCase => {
      return {
        name: `"${testCase.token}" token`,
        testCaseId: testCase.id,
        test: async ({ web }: IExecution) => {
          if (testCase.token === Token.cUSD) {
            await web.swap.swapInputs({ shouldReturnRates: false });
          }
          await web.swap.fillForm({
            tokens: { sell: testCase.token },
            waitForLoadedRate: false,
            clicksOnSellTokenButton: 1,
          });
          await web.swap.openSelectTokenModal({
            tokenType: "buy",
          });
          const validTokens =
            await web.swap.selectTokenModalPage.getAllValidTokenNames();
          expect.soft(validTokens).toEqual(testCase.expectedValidTokens);
          const invalidTokens =
            await web.swap.selectTokenModalPage.getAllInvalidTokenNames();
          expect(invalidTokens).toEqual(testCase.expectedInvalidTokens);
        },
      };
    }),
  ],
});
