import { expect } from "@fixtures/common/common.fixture";
import { defaultSwapAmount, Token } from "@constants/token.constants";
import { suite } from "@helpers/suite/suite.helper";
import { IExecution } from "@helpers/suite/suite.types";
import { WalletName } from "@services/connect-wallet-modal/connect-wallet-modal.service.types";

const testCases = [
  {
    token: Token.CELO,
    expectedTokens: [
      Token.cUSD,
      Token.cEUR,
      Token.cREAL,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.axlEUROC,
      Token.eXOF,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    id: "@T61ff6eca",
  },
  {
    token: Token.cUSD,
    expectedTokens: [
      Token.CELO,
      Token.cEUR,
      Token.cREAL,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.eXOF,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    id: "@T4cf1f159",
  },
  {
    token: Token.cEUR,
    expectedTokens: [
      Token.CELO,
      Token.cUSD,
      Token.cREAL,
      Token.USDC,
      Token.axlUSDC,
      Token.axlEUROC,
      Token.eXOF,
    ],
    id: "@T55e5689d",
  },
  {
    token: Token.cREAL,
    expectedTokens: [
      Token.CELO,
      Token.cUSD,
      Token.cEUR,
      Token.USDC,
      Token.axlUSDC,
      Token.eXOF,
    ],
    id: "@T1cdcec6e",
  },
  {
    token: Token.USDC,
    expectedTokens: [
      Token.CELO,
      Token.cUSD,
      Token.cEUR,
      Token.cREAL,
      Token.axlUSDC,
      Token.axlEUROC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    id: "@T65b923f0",
  },
  {
    token: Token.USDT,
    expectedTokens: [
      Token.CELO,
      Token.cUSD,
      Token.USDC,
      Token.axlUSDC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    id: "@T1728aaf3",
  },
  {
    token: Token.axlUSDC,
    expectedTokens: [
      Token.CELO,
      Token.cUSD,
      Token.cEUR,
      Token.cREAL,
      Token.USDC,
      Token.USDT,
      Token.axlEUROC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    id: "@T3842f1e6",
  },
  {
    token: Token.axlEUROC,
    expectedTokens: [
      Token.CELO,
      Token.cEUR,
      Token.USDC,
      Token.axlUSDC,
      Token.eXOF,
    ],
    id: "@T1b2d5431",
  },
  {
    token: Token.eXOF,
    expectedTokens: [
      Token.CELO,
      Token.cUSD,
      Token.cEUR,
      Token.cREAL,
      Token.axlEUROC,
    ],
    id: "@T8b44f3ea",
  },
  {
    token: Token.cKES,
    expectedTokens: [
      Token.CELO,
      Token.cUSD,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.axlEUROC,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    id: "@Tdf1f8d60",
  },
  {
    token: Token.PUSO,
    expectedTokens: [
      Token.CELO,
      Token.cUSD,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    id: "@Td740bfbf",
  },
  {
    token: Token.cCOP,
    expectedTokens: [
      Token.CELO,
      Token.cUSD,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.cKES,
      Token.PUSO,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    id: "@T7a80e866",
  },
  {
    token: Token.cGHS,
    expectedTokens: [
      Token.CELO,
      Token.cUSD,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    id: "@",
  },
  {
    token: Token.cGBP,
    expectedTokens: [
      Token.CELO,
      Token.cUSD,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    id: "@",
  },
  {
    token: Token.cZAR,
    expectedTokens: [
      Token.CELO,
      Token.cUSD,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    id: "@",
  },
  {
    token: Token.cCAD,
    expectedTokens: [
      Token.CELO,
      Token.cUSD,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    id: "@",
  },
  {
    token: Token.cAUD,
    expectedTokens: [
      Token.CELO,
      Token.cUSD,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cCHF,
      Token.cJPY,
      Token.cNGN,
    ],
    id: "@",
  },
  {
    token: Token.cCHF,
    expectedTokens: [
      Token.CELO,
      Token.cUSD,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cJPY,
      Token.cNGN,
    ],
    id: "@",
  },
  {
    token: Token.cJPY,
    expectedTokens: [
      Token.CELO,
      Token.cUSD,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cNGN,
    ],
    id: "@",
  },
  {
    token: Token.cNGN,
    expectedTokens: [
      Token.CELO,
      Token.cUSD,
      Token.USDC,
      Token.USDT,
      Token.axlUSDC,
      Token.cKES,
      Token.PUSO,
      Token.cCOP,
      Token.cGHS,
      Token.cGBP,
      Token.cZAR,
      Token.cCAD,
      Token.cAUD,
      Token.cCHF,
      Token.cJPY,
    ],
    id: "@",
  },
];

suite({
  name: "Swap - Token Exchange Options",
  tests: [
    {
      name: "Swap token inputs",
      testCaseId: "@Td88a4d31",
      test: async ({ web }) => {
        await web.main.connectWalletByName(WalletName.Metamask);
        await web.swap.fillForm({
          sellAmount: defaultSwapAmount,
          tokens: {
            sell: Token.cREAL,
            buy: Token.CELO,
            clicksOnSellTokenButton: 1,
          },
        });
        await web.swap.swapInputs();
        expect(await web.swap.getCurrentSellTokenName()).toEqual(Token.CELO);
        expect(await web.swap.getCurrentBuyTokenName()).toEqual(Token.cREAL);
      },
    },
    ...testCases.map(testCase => {
      return {
        name: `from ${testCase.token} token`,
        testCaseId: testCase.id,
        test: async ({ web }: IExecution) => {
          if (testCase.token === Token.cUSD) {
            await web.swap.swapInputs({ shouldReturnRates: false });
          }
          await web.swap.fillForm({
            tokens: { sell: testCase.token, clicksOnSellTokenButton: 1 },
          });
          await web.swap.page.selectBuyTokenButton.click({
            force: true,
          });
          expect(
            await web.swap.selectTokenModalPage.getAllTokenNames(),
          ).toEqual(testCase.expectedTokens);
        },
      };
    }),
  ],
});
