# Generic workflow to build all test's workflows
name: Common Test Run

on:
  workflow_call:
    inputs:
      SPEC_NAMES:
        description: "Spec names of running tests"
        required: false
        type: string
      SPECS_TYPE:
        description: "Spec type of running tests"
        required: false
        type: string
      SPECS_FOLDER_NAME:
        description: "Spec relative folder name of running tests"
        required: false
        type: string
      IS_PARALLEL_RUN:
        description: "Parallel run flag of running tests"
        required: false
        default: "false"
        type: string
      CUSTOM_URL:
        description: "Custom base url to run tests against different URLs"
        required: false
        type: string
      IS_MAINNET:
        description: "Mainnet test run flag"
        required: false
        default: "false"
        type: string
      HTML_REPORT_NAME:
        description: "HTML report name"
        required: true
        type: string
      HTML_REPORT_GENERATION:
        description: "HTML report generation"
        required: false
        default: "onFailure"
        type: string
      TESTOMAT_REPORT_GENERATION:
        description: "Testomat test run report generation"
        required: false
        default: "true"
        type: string
      TESTOMATIO_TITLE:
        description: "Title of test run in the Testomat"
        required: false
        type: string
      NOTIFICATION_MESSAGE:
        description: "Notification message for Discord"
        required: false
        type: string

    secrets:
      E2E_TEST_SEED_PHRASE:
        description: "Seed phrase to import wallet"
        required: true
      E2E_TEST_WALLET_PASSWORD:
        description: "Wallet password to login to wallet"
        required: true
      TESTOMAT_API_KEY:
        description: "API key to sync with Testomat account"
        required: true
      DISCORD_TEST_RUN_WEBHOOK_ID:
        required: true
      DISCORD_TEST_RUN_WEBHOOK_TOKEN:
        required: true
      GCP_SA_KEY:
        description: "Google Cloud Service Account key JSON"
        required: true

jobs:
  test:
    timeout-minutes: 60
    env:
      SPECS_TYPE: ${{ inputs.SPECS_TYPE }}
      SPEC_NAMES: ${{ inputs.SPEC_NAMES }}
      SPECS_FOLDER_NAME: ${{ inputs.SPECS_FOLDER_NAME }}
      IS_PARALLEL_RUN: ${{ inputs.IS_PARALLEL_RUN }}
      CUSTOM_URL: ${{ inputs.CUSTOM_URL }}
      IS_MAINNET: ${{ inputs.IS_MAINNET }}
      HTML_REPORT_GENERATION: ${{ inputs.HTML_REPORT_GENERATION }}
      TESTOMAT_REPORT_GENERATION: ${{ inputs.TESTOMAT_REPORT_GENERATION }}
      SEED_PHRASE: ${{ secrets.E2E_TEST_SEED_PHRASE }}
      WALLET_PASSWORD: ${{ secrets.E2E_TEST_WALLET_PASSWORD }}
      TESTOMAT_API_KEY: ${{ secrets.TESTOMAT_API_KEY }}
      GCS_BUCKET_NAME: "mento-playwright-reports"
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.48.2-jammy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: 18.20.0

      - name: Install dependencies
        run: npm ci

      - name: Verify env config
        run: npm run verify-env-config

      - name: Code-Check
        run: npm run codeCheck

      - name: Build Synpress cache
        run: xvfb-run npx synpress src/wallet-setups

      - name: Set current datetime
        run: |
          CURRENT_DATETIME=$(date +"%Y-%m-%d %H:%M:%S")
          echo "CURRENT_DATETIME=$CURRENT_DATETIME" >> $GITHUB_ENV

      - name: Run Playwright tests
        run: xvfb-run npx playwright test
        env:
          TESTOMATIO_TITLE: "${{ inputs.TESTOMATIO_TITLE }} by ${{ github.actor }} at: ${{ env.CURRENT_DATETIME }}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: ${{ (inputs.HTML_REPORT_GENERATION == 'true') || (failure() && inputs.HTML_REPORT_GENERATION == 'onFailure') }}
        with:
          name: "${{ inputs.HTML_REPORT_NAME }}-playwright-report"
          path: "artifacts/reports/playwright-report/"
          retention-days: 30

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Upload report to GCS
        if: ${{ (inputs.HTML_REPORT_GENERATION == 'true') || (failure() && inputs.HTML_REPORT_GENERATION == 'onFailure') }}
        run: |
          # Create a unique folder for this run
          RUN_FOLDER="run-${{ github.run_id }}-${{ github.run_number }}"

          # Upload the report to GCS
          gsutil -m cp -r artifacts/reports/playwright-report/* gs://${{ env.GCS_BUCKET_NAME }}/$RUN_FOLDER/

          # Make the files publicly accessible
          gsutil -m acl ch -r -u AllUsers:R gs://${{ env.GCS_BUCKET_NAME }}/$RUN_FOLDER/

          # Output the public URL
          echo "Report URL: https://storage.googleapis.com/${{ env.GCS_BUCKET_NAME }}/$RUN_FOLDER/index.html" >> $GITHUB_STEP_SUMMARY

  notification:
    needs: test
    if: always()
    uses: ./.github/workflows/notification.yml
    with:
      JOB_STATUS: ${{ needs.test.result }}
      MESSAGE: "${{ inputs.NOTIFICATION_MESSAGE }} by ${{ github.actor }}"
      JOB_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    secrets:
      DISCORD_TEST_RUN_WEBHOOK_ID: ${{ secrets.DISCORD_TEST_RUN_WEBHOOK_ID }}
      DISCORD_TEST_RUN_WEBHOOK_TOKEN: ${{ secrets.DISCORD_TEST_RUN_WEBHOOK_TOKEN }}
